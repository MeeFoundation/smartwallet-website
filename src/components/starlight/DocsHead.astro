---
import type { Props } from "@astrojs/starlight/props";
import { AstroError } from "astro/errors";

import Search from "@astrojs/starlight/components/Search.astro";
// import ThemeSelect from "@astrojs/starlight/components/ThemeSelect.astro";
// import LanguageSelect from "@astrojs/starlight/components/LanguageSelect.astro";

import Header from "../Header.astro";

const findIfIsCurrent = (
  entry: (typeof Astro.props.sidebar)[number],
): boolean => {
  if (entry.type === "link") {
    return entry.isCurrent;
  }
  return entry.entries.some((item) => findIfIsCurrent(item));
};

const apps = Astro.props.sidebar.map((entry) => {
  if (entry.type !== "group") {
    throw new AstroError(
      `\`${entry.label}\` cannot be used with multiple Starlight sidebars.
  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.
  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups`,
    );
  }

  function getFirstLink(entry: (typeof Astro.props.sidebar)[number]) {
    if (entry.type === "group") {
      for (let item of entry.entries) {
        if (item.type === "link") return item;

        if (item.entries) {
          return getFirstLink(item);
        }
      }
    }
    return entry;
  }

  const getHref = (entry: (typeof Astro.props.sidebar)[number] | undefined) => {
    if (entry?.type === "link") {
      return entry.href;
    }
    return "";
  };

  const link = getFirstLink(entry);
  const isCurrentPage = findIfIsCurrent(entry);
  return {
    value: getHref(link) ?? "",
    active: isCurrentPage,
    label: entry.label,
  };
});
---

<div class="flex flex-col items-center">
  <Header activePage="docs" type="docs" />
  <div
    class="header flex h-full w-full max-w-7xl flex-col items-center justify-between gap-2 px-5 py-3 md:flex-row"
  >
    <div class="flex gap-10">
      {
        apps.map((app) => (
          <a
            href={app.value}
            class:list={[
              "app-link relative text-base font-semibold text-brand-950/80",
              "hover:text-brand-950 hover:after:absolute hover:after:-bottom-1 hover:after:left-0 hover:after:z-10 hover:after:h-px hover:after:w-full hover:after:bg-[var(--sl-mee-accent)] hover:after:content-[''] md:hover:after:-bottom-[19px]",
              app.active &&
                "text-brand-950 after:absolute after:-bottom-1 after:left-0 after:z-10 after:h-px after:w-full after:bg-[var(--sl-mee-accent)] after:content-[''] md:after:-bottom-[19px]",
            ]}
          >
            <span>{app.label}</span>
          </a>
        ))
      }
    </div>
    <div class="flex w-full items-center md:w-auto">
      <div class="flex w-full items-center justify-center gap-2">
        <div class="mr-10 mt-1 w-full sm:mr-0 md:mt-0 md:w-80">
          <Search {...Astro.props} />
        </div>
        <!-- <div class="hidden items-center gap-4 md:flex">
          <ThemeSelect {...Astro.props} />
          <LanguageSelect {...Astro.props} />
        </div> -->
      </div>
    </div>
  </div>
</div>

<script is:inline>
  //TODO remove this script after enable ThemeSelect
  window.StarlightThemeProvider = (() => {
    document.documentElement.dataset.theme = "light";
  })();
</script>

<style>
  .header {
    gap: var(--sl-nav-gap);
    justify-content: space-between;
    align-items: center;
    height: 100%;
    position: relative;
  }

  .title-wrapper {
    overflow: hidden;
  }
</style>
